/*
 * -------------------------------------------------
 * h3achipimputation Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

    version = '1.0'
    container = 'docker://quay.io/h3abionet_org/impute2:v3' // Container slug. Stable releases should specify release tag!
    clusterOptions = false
    help = false

    chromosomes = "ALL" // Impute all chromosomes by default
    project_name = "h3achipimputation" // Default project name

    // Minimac4 option
    minRatio = '0.01'
    chunk = ''

//    source_dataset = "/cbio/projects/001/test_data/threesamples.unphased.22.vcf.gz"
    source_dataset = "/cbio/projects/001/threesamples.unphased.22.vcf.gz"
//    source_dataset = "/scratch/mamana/reference/test_data/qc_three_samples/H3AFRICAv1/VCF/threesamples.unphased.21-22_H3AFRICAv1_qc_three_samples.vcf.gz"
    outDir = "/scratch/users/mamana/test_data/output/"
    publishDir = "/users/mamana/chipimputation_test_data/testdata_imputation"
    subset_size = 8000
//    chunk = '1:20000000-30000000'
    chunk = '22:15000000-35000000'

    // Phasing with Eagle
    eagle_genetic_map       = "/cbio/dbs/refpanels/eagle/tables/genetic_map_hg19_withX.txt.gz"

    reference_genome        = "/cbio/dbs/gatk/2.8/b37/human_g1k_v37_decoy.fasta"

    reference_vcf           = "/cbio/projects/001/threesamples.unphased.22.vcf.gz"

    h3achip                 = '/cbio/dbs/refpanels/CHIP_MANIFS/H3ACHIP/H3Africa_2017_20021485_A3.csv'


}

profiles {

    standard {
    }
    conda { process.conda = "$baseDir/environment.yml" }
    singularity {
        singularity.enabled = true
        singularity.autoMounts = true
        //process.container = 'shub://h3abionet/chipimputation:minimac4'
        process.container = 'docker://quay.io/h3abionet_org/impute2:v3'
    }
    slurm {
        process.executor = 'slurm'
    }
    docker {
      docker.enabled = true
      process.container = 'docker://quay.io/h3abionet_org/impute2:v3'
    }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

manifest {
    name = 'h3achipimputation'
    description = 'imputation'
    homePage = 'https://github.com/h3abionet/chipimputation'
    mainScript = 'main.nf'
    version = '>=0.31.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if(type == 'memory'){
        try {
            if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'time'){
        try {
            if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if(type == 'cpus'){
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}

workflow.onComplete = {
    println "========================================="
    println "Pipeline completed at: $workflow.complete"
    println "Execution status: ${ workflow.success ? 'OK' : 'failed' }"
}
